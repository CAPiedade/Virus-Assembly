from __future__ import print_function
from time import time
# "time is a comodity that should have to be imported"
import itertools
from sympy.combinatorics import PermutationGroup, Permutation
from scipy.misc import comb


S = PermutationGroup([Permutation(),
Permutation(0,28)(1,29)(2,25)(3,26)(4,27)(5,14)(6,10)(7,11)(8,12)(9,13)(15,32)(16,33)(17,34)(18,30)(19,31)(20,41)(21,42)(22,43)(23,44)(24,40)(35,59)(36,55)(37,56)(38,57)(39,58)(45,53)(46,54)(47,50)(48,51)(49,52),
Permutation(0,46)(1,47)(2,48)(3,49)(4,45)(5,12)(6,13)(7,14)(8,10)(9,11)(15,54)(16,50)(17,51)(18,52)(19,53)(20,39)(21,35)(22,36)(23,37)(24,38)(25,58)(26,59)(27,55)(28,56)(29,57)(30,42)(31,43)(32,44)(33,40)(34,41),
Permutation(0,15)(1,16)(2,17)(3,18)(4,19)(5,10)(6,11)(7,12)(8,13)(9,14)(20,25)(21,26)(22,27)(23,28)(24,29)(30,35)(31,36)(32,37)(33,38)(34,39)(40,50)(41,51)(42,52)(43,53)(44,54)(45,55)(46,56)(47,57)(48,58)(49,59),
Permutation(0,18)(1,19)(2,15)(3,16)(4,17)(5,59)(6,55)(7,56)(8,57)(9,58)(10,41)(11,42)(12,43)(13,44)(14,40)(20,36)(21,37)(22,38)(23,39)(24,35)(25,47)(26,48)(27,49)(28,45)(29,46)(30,53)(31,54)(32,50)(33,51)(34,52),
Permutation(0,10)(1,11)(2,12)(3,13)(4,14)(5,15)(6,16)(7,17)(8,18)(9,19)(20,35)(21,36)(22,37)(23,38)(24,39)(25,30)(26,31)(27,32)(28,33)(29,34)(40,45)(41,46)(42,47)(43,48)(44,49)(50,55)(51,56)(52,57)(53,58)(54,59),
Permutation(0,42,14,38,31)(1,43,10,39,32)(2,44,11,35,33)(3,40,12,36,34)(4,41,13,37,30)(5,21,28,19,57)(6,22,29,15,58)(7,23,25,16,59)(8,24,26,17,55)(9,20,27,18,56)(45,46,47,48,49)(50,54,53,52,51),
Permutation(0,59,13)(1,55,14)(2,56,10)(3,57,11)(4,58,12)(5,18,44)(6,19,40)(7,15,41)(8,16,42)(9,17,43)(20,53,26)(21,54,27)(22,50,28)(23,51,29)(24,52,25)(30,36,48)(31,37,49)(32,38,45)(33,39,46)(34,35,47),
Permutation(0,50,35)(1,51,36)(2,52,37)(3,53,38)(4,54,39)(5,55,30)(6,56,31)(7,57,32)(8,58,33)(9,59,34)(10,40,25)(11,41,26)(12,42,27)(13,43,28)(14,44,29)(15,45,20)(16,46,21)(17,47,22)(18,48,23)(19,49,24),
Permutation(0,17)(1,18)(2,19)(3,15)(4,16)(5,51)(6,52)(7,53)(8,54)(9,50)(10,49)(11,45)(12,46)(13,47)(14,48)(20,57)(21,58)(22,59)(23,55)(24,56)(25,31)(26,32)(27,33)(28,34)(29,30)(35,43)(36,44)(37,40)(38,41)(39,42),
Permutation(0,33,6)(1,34,7)(2,30,8)(3,31,9)(4,32,5)(10,16,28)(11,17,29)(12,18,25)(13,19,26)(14,15,27)(20,46,59)(21,47,55)(22,48,56)(23,49,57)(24,45,58)(35,54,41)(36,50,42)(37,51,43)(38,52,44)(39,53,40),
Permutation(0,9,22)(1,5,23)(2,6,24)(3,7,20)(4,8,21)(10,37,19)(11,38,15)(12,39,16)(13,35,17)(14,36,18)(25,49,56)(26,45,57)(27,46,58)(28,47,59)(29,48,55)(30,51,44)(31,52,40)(32,53,41)(33,54,42)(34,50,43),
Permutation(0,16)(1,17)(2,18)(3,19)(4,15)(5,27)(6,28)(7,29)(8,25)(9,26)(10,33)(11,34)(12,30)(13,31)(14,32)(20,54)(21,50)(22,51)(23,52)(24,53)(35,46)(36,47)(37,48)(38,49)(39,45)(40,58)(41,59)(42,55)(43,56)(44,57),
Permutation(0,5)(1,6)(2,7)(3,8)(4,9)(10,15)(11,16)(12,17)(13,18)(14,19)(20,30)(21,31)(22,32)(23,33)(24,34)(25,35)(26,36)(27,37)(28,38)(29,39)(40,55)(41,56)(42,57)(43,58)(44,59)(45,50)(46,51)(47,52)(48,53)(49,54),
Permutation(0,51,12)(1,52,13)(2,53,14)(3,54,10)(4,50,11)(5,17,46)(6,18,47)(7,19,48)(8,15,49)(9,16,45)(20,29,42)(21,25,43)(22,26,44)(23,27,40)(24,28,41)(30,57,39)(31,58,35)(32,59,36)(33,55,37)(34,56,38),
Permutation(0,24,27,11,48)(1,20,28,12,49)(2,21,29,13,45)(3,22,25,14,46)(4,23,26,10,47)(5,53,16,37,34)(6,54,17,38,30)(7,50,18,39,31)(8,51,19,35,32)(9,52,15,36,33)(40,41,42,43,44)(55,59,58,57,56),
Permutation(0,8,52,29,41)(1,9,53,25,42)(2,5,54,26,43)(3,6,50,27,44)(4,7,51,28,40)(10,46,34,57,18)(11,47,30,58,19)(12,48,31,59,15)(13,49,32,55,16)(14,45,33,56,17)(20,21,22,23,24)(35,39,38,37,36),
Permutation(0,20,40)(1,21,41)(2,22,42)(3,23,43)(4,24,44)(5,25,45)(6,26,46)(7,27,47)(8,28,48)(9,29,49)(10,30,50)(11,31,51)(12,32,52)(13,33,53)(14,34,54)(15,35,55)(16,36,56)(17,37,57)(18,38,58)(19,39,59),
Permutation(0,45,30)(1,46,31)(2,47,32)(3,48,33)(4,49,34)(5,40,35)(6,41,36)(7,42,37)(8,43,38)(9,44,39)(10,55,20)(11,56,21)(12,57,22)(13,58,23)(14,59,24)(15,50,25)(16,51,26)(17,52,27)(18,53,28)(19,54,29),
Permutation(0,34)(1,30)(2,31)(3,32)(4,33)(5,48)(6,49)(7,45)(8,46)(9,47)(10,52)(11,53)(12,54)(13,50)(14,51)(15,26)(16,27)(17,28)(18,29)(19,25)(20,38)(21,39)(22,35)(23,36)(24,37)(40,56)(41,57)(42,58)(43,59)(44,55),
Permutation(0,44)(1,40)(2,41)(3,42)(4,43)(5,13)(6,14)(7,10)(8,11)(9,12)(15,56)(16,57)(17,58)(18,59)(19,55)(20,48)(21,49)(22,45)(23,46)(24,47)(25,34)(26,30)(27,31)(28,32)(29,33)(35,52)(36,53)(37,54)(38,50)(39,51),
Permutation(0,53)(1,54)(2,50)(3,51)(4,52)(5,24)(6,20)(7,21)(8,22)(9,23)(10,36)(11,37)(12,38)(13,39)(14,35)(15,47)(16,48)(17,49)(18,45)(19,46)(25,32)(26,33)(27,34)(28,30)(29,31)(40,59)(41,55)(42,56)(43,57)(44,58),
Permutation(0,55,25)(1,56,26)(2,57,27)(3,58,28)(4,59,29)(5,50,20)(6,51,21)(7,52,22)(8,53,23)(9,54,24)(10,45,35)(11,46,36)(12,47,37)(13,48,38)(14,49,39)(15,40,30)(16,41,31)(17,42,32)(18,43,33)(19,44,34),
Permutation(0,26,39)(1,27,35)(2,28,36)(3,29,37)(4,25,38)(5,52,58)(6,53,59)(7,54,55)(8,50,56)(9,51,57)(10,48,42)(11,49,43)(12,45,44)(13,46,40)(14,47,41)(15,34,21)(16,30,22)(17,31,23)(18,32,24)(19,33,20),
Permutation(0,37)(1,38)(2,39)(3,35)(4,36)(5,11)(6,12)(7,13)(8,14)(9,10)(15,23)(16,24)(17,20)(18,21)(19,22)(25,51)(26,52)(27,53)(28,54)(29,50)(30,49)(31,45)(32,46)(33,47)(34,48)(40,57)(41,58)(42,59)(43,55)(44,56),
Permutation(0,1,2,3,4)(5,22,41,49,33)(6,23,42,45,34)(7,24,43,46,30)(8,20,44,47,31)(9,21,40,48,32)(10,38,59,51,27)(11,39,55,52,28)(12,35,56,53,29)(13,36,57,54,25)(14,37,58,50,26)(15,19,18,17,16),
Permutation(0,21)(1,22)(2,23)(3,24)(4,20)(5,42)(6,43)(7,44)(8,40)(9,41)(10,58)(11,59)(12,55)(13,56)(14,57)(15,39)(16,35)(17,36)(18,37)(19,38)(25,33)(26,34)(27,30)(28,31)(29,32)(45,54)(46,50)(47,51)(48,52)(49,53),
Permutation(0,32,56,54,23)(1,33,57,50,24)(2,34,58,51,20)(3,30,59,52,21)(4,31,55,53,22)(5,6,7,8,9)(10,14,13,12,11)(15,28,44,46,37)(16,29,40,47,38)(17,25,41,48,39)(18,26,42,49,35)(19,27,43,45,36),
Permutation(0,43,47)(1,44,48)(2,40,49)(3,41,45)(4,42,46)(5,29,36)(6,25,37)(7,26,38)(8,27,39)(9,28,35)(10,31,24)(11,32,20)(12,33,21)(13,34,22)(14,30,23)(15,57,53)(16,58,54)(17,59,50)(18,55,51)(19,56,52),
Permutation(0,19)(1,15)(2,16)(3,17)(4,18)(5,38)(6,39)(7,35)(8,36)(9,37)(10,22)(11,23)(12,24)(13,20)(14,21)(25,44)(26,40)(27,41)(28,42)(29,43)(30,56)(31,57)(32,58)(33,59)(34,55)(45,52)(46,53)(47,54)(48,50)(49,51),
Permutation(0,49,36,58,7)(1,45,37,59,8)(2,46,38,55,9)(3,47,39,56,5)(4,48,35,57,6)(10,17,53,21,44)(11,18,54,22,40)(12,19,50,23,41)(13,15,51,24,42)(14,16,52,20,43)(25,29,28,27,26)(30,31,32,33,34),
Permutation(0,57)(1,58)(2,59)(3,55)(4,56)(5,31)(6,32)(7,33)(8,34)(9,30)(10,29)(11,25)(12,26)(13,27)(14,28)(15,43)(16,44)(17,40)(18,41)(19,42)(20,37)(21,38)(22,39)(23,35)(24,36)(45,51)(46,52)(47,53)(48,54)(49,50),
Permutation(0,13,59)(1,14,55)(2,10,56)(3,11,57)(4,12,58)(5,44,18)(6,40,19)(7,41,15)(8,42,16)(9,43,17)(20,26,53)(21,27,54)(22,28,50)(23,29,51)(24,25,52)(30,48,36)(31,49,37)(32,45,38)(33,46,39)(34,47,35),
Permutation(0,38,42,31,14)(1,39,43,32,10)(2,35,44,33,11)(3,36,40,34,12)(4,37,41,30,13)(5,19,21,57,28)(6,15,22,58,29)(7,16,23,59,25)(8,17,24,55,26)(9,18,20,56,27)(45,48,46,49,47)(50,52,54,51,53),
Permutation(0,2,4,1,3)(5,41,33,22,49)(6,42,34,23,45)(7,43,30,24,46)(8,44,31,20,47)(9,40,32,21,48)(10,59,27,38,51)(11,55,28,39,52)(12,56,29,35,53)(13,57,25,36,54)(14,58,26,37,50)(15,18,16,19,17),
Permutation(0,39,26)(1,35,27)(2,36,28)(3,37,29)(4,38,25)(5,58,52)(6,59,53)(7,55,54)(8,56,50)(9,57,51)(10,42,48)(11,43,49)(12,44,45)(13,40,46)(14,41,47)(15,21,34)(16,22,30)(17,23,31)(18,24,32)(19,20,33),
Permutation(0,58,49,7,36)(1,59,45,8,37)(2,55,46,9,38)(3,56,47,5,39)(4,57,48,6,35)(10,21,17,44,53)(11,22,18,40,54)(12,23,19,41,50)(13,24,15,42,51)(14,20,16,43,52)(25,27,29,26,28)(30,33,31,34,32),
Permutation(0,52,41,8,29)(1,53,42,9,25)(2,54,43,5,26)(3,50,44,6,27)(4,51,40,7,28)(10,34,18,46,57)(11,30,19,47,58)(12,31,15,48,59)(13,32,16,49,55)(14,33,17,45,56)(20,22,24,21,23)(35,38,36,39,37),
Permutation(0,27,48,24,11)(1,28,49,20,12)(2,29,45,21,13)(3,25,46,22,14)(4,26,47,23,10)(5,16,34,53,37)(6,17,30,54,38)(7,18,31,50,39)(8,19,32,51,35)(9,15,33,52,36)(40,42,44,41,43)(55,58,56,59,57),
Permutation(0,3,1,4,2)(5,49,22,33,41)(6,45,23,34,42)(7,46,24,30,43)(8,47,20,31,44)(9,48,21,32,40)(10,51,38,27,59)(11,52,39,28,55)(12,53,35,29,56)(13,54,36,25,57)(14,50,37,26,58)(15,17,19,16,18),
Permutation(0,41,29,52,8)(1,42,25,53,9)(2,43,26,54,5)(3,44,27,50,6)(4,40,28,51,7)(10,18,57,34,46)(11,19,58,30,47)(12,15,59,31,48)(13,16,55,32,49)(14,17,56,33,45)(20,24,23,22,21)(35,36,37,38,39),
Permutation(0,12,51)(1,13,52)(2,14,53)(3,10,54)(4,11,50)(5,46,17)(6,47,18)(7,48,19)(8,49,15)(9,45,16)(20,42,29)(21,43,25)(22,44,26)(23,40,27)(24,41,28)(30,39,57)(31,35,58)(32,36,59)(33,37,55)(34,38,56),
Permutation(0,29,8,41,52)(1,25,9,42,53)(2,26,5,43,54)(3,27,6,44,50)(4,28,7,40,51)(10,57,46,18,34)(11,58,47,19,30)(12,59,48,15,31)(13,55,49,16,32)(14,56,45,17,33)(20,23,21,24,22)(35,37,39,36,38),
Permutation(0,22,9)(1,23,5)(2,24,6)(3,20,7)(4,21,8)(10,19,37)(11,15,38)(12,16,39)(13,17,35)(14,18,36)(25,56,49)(26,57,45)(27,58,46)(28,59,47)(29,55,48)(30,44,51)(31,40,52)(32,41,53)(33,42,54)(34,43,50),
Permutation(0,56,23,32,54)(1,57,24,33,50)(2,58,20,34,51)(3,59,21,30,52)(4,55,22,31,53)(5,7,9,6,8)(10,13,11,14,12)(15,44,37,28,46)(16,40,38,29,47)(17,41,39,25,48)(18,42,35,26,49)(19,43,36,27,45),
Permutation(0,54,32,23,56)(1,50,33,24,57)(2,51,34,20,58)(3,52,30,21,59)(4,53,31,22,55)(5,8,6,9,7)(10,12,14,11,13)(15,46,28,37,44)(16,47,29,38,40)(17,48,25,39,41)(18,49,26,35,42)(19,45,27,36,43),
Permutation(0,7,58,36,49)(1,8,59,37,45)(2,9,55,38,46)(3,5,56,39,47)(4,6,57,35,48)(10,44,21,53,17)(11,40,22,54,18)(12,41,23,50,19)(13,42,24,51,15)(14,43,20,52,16)(25,26,27,28,29)(30,34,33,32,31),
Permutation(0,48,11,27,24)(1,49,12,28,20)(2,45,13,29,21)(3,46,14,25,22)(4,47,10,26,23)(5,34,37,16,53)(6,30,38,17,54)(7,31,39,18,50)(8,32,35,19,51)(9,33,36,15,52)(40,44,43,42,41)(55,56,57,58,59),
Permutation(0,25,55)(1,26,56)(2,27,57)(3,28,58)(4,29,59)(5,20,50)(6,21,51)(7,22,52)(8,23,53)(9,24,54)(10,35,45)(11,36,46)(12,37,47)(13,38,48)(14,39,49)(15,30,40)(16,31,41)(17,32,42)(18,33,43)(19,34,44),
Permutation(0,6,33)(1,7,34)(2,8,30)(3,9,31)(4,5,32)(10,28,16)(11,29,17)(12,25,18)(13,26,19)(14,27,15)(20,59,46)(21,55,47)(22,56,48)(23,57,49)(24,58,45)(35,41,54)(36,42,50)(37,43,51)(38,44,52)(39,40,53),
Permutation(0,35,50)(1,36,51)(2,37,52)(3,38,53)(4,39,54)(5,30,55)(6,31,56)(7,32,57)(8,33,58)(9,34,59)(10,25,40)(11,26,41)(12,27,42)(13,28,43)(14,29,44)(15,20,45)(16,21,46)(17,22,47)(18,23,48)(19,24,49),
Permutation(0,40,20)(1,41,21)(2,42,22)(3,43,23)(4,44,24)(5,45,25)(6,46,26)(7,47,27)(8,48,28)(9,49,29)(10,50,30)(11,51,31)(12,52,32)(13,53,33)(14,54,34)(15,55,35)(16,56,36)(17,57,37)(18,58,38)(19,59,39),
Permutation(0,11,24,48,27)(1,12,20,49,28)(2,13,21,45,29)(3,14,22,46,25)(4,10,23,47,26)(5,37,53,34,16)(6,38,54,30,17)(7,39,50,31,18)(8,35,51,32,19)(9,36,52,33,15)(40,43,41,44,42)(55,57,59,56,58),
Permutation(0,31,38,14,42)(1,32,39,10,43)(2,33,35,11,44)(3,34,36,12,40)(4,30,37,13,41)(5,57,19,28,21)(6,58,15,29,22)(7,59,16,25,23)(8,55,17,26,24)(9,56,18,27,20)(45,49,48,47,46)(50,51,52,53,54),
Permutation(0,23,54,56,32)(1,24,50,57,33)(2,20,51,58,34)(3,21,52,59,30)(4,22,53,55,31)(5,9,8,7,6)(10,11,12,13,14)(15,37,46,44,28)(16,38,47,40,29)(17,39,48,41,25)(18,35,49,42,26)(19,36,45,43,27),
Permutation(0,4,3,2,1)(5,33,49,41,22)(6,34,45,42,23)(7,30,46,43,24)(8,31,47,44,20)(9,32,48,40,21)(10,27,51,59,38)(11,28,52,55,39)(12,29,53,56,35)(13,25,54,57,36)(14,26,50,58,37)(15,16,17,18,19),
Permutation(0,30,45)(1,31,46)(2,32,47)(3,33,48)(4,34,49)(5,35,40)(6,36,41)(7,37,42)(8,38,43)(9,39,44)(10,20,55)(11,21,56)(12,22,57)(13,23,58)(14,24,59)(15,25,50)(16,26,51)(17,27,52)(18,28,53)(19,29,54),
Permutation(0,47,43)(1,48,44)(2,49,40)(3,45,41)(4,46,42)(5,36,29)(6,37,25)(7,38,26)(8,39,27)(9,35,28)(10,24,31)(11,20,32)(12,21,33)(13,22,34)(14,23,30)(15,53,57)(16,54,58)(17,50,59)(18,51,55)(19,52,56),
Permutation(0,36,7,49,58)(1,37,8,45,59)(2,38,9,46,55)(3,39,5,47,56)(4,35,6,48,57)(10,53,44,17,21)(11,54,40,18,22)(12,50,41,19,23)(13,51,42,15,24)(14,52,43,16,20)(25,28,26,29,27)(30,32,34,31,33),
Permutation(0,14,31,42,38)(1,10,32,43,39)(2,11,33,44,35)(3,12,34,40,36)(4,13,30,41,37)(5,28,57,21,19)(6,29,58,22,15)(7,25,59,23,16)(8,26,55,24,17)(9,27,56,20,18)(45,47,49,46,48)(50,53,51,54,52)])

def onelistmaker(n):
    """Creates a list of n 1's"""
    #TODO: see if numpy.ones() is a better alternative
    return [1] * n

def class_generator(size, n):
    """Generator: creates a list with 1's with size, then marks with a 0 then
       indexes returned by combinations(range(size), n).
       if n > 0, first position must be marked."""
       
    # TODO: see if numpy fancy boolean indexing does the same job
    
    if n == 0:
        yield onelistmaker(size)
        return

    for comb in itertools.combinations(range(size), n):
        if comb[0] != 0: # combinations come in lexicographic order
            break        # the ones with comb[0] == 0 come first!
        
        index_pos = onelistmaker(size)
        for p in comb:
            index_pos[p]=0
        yield index_pos
        #n_class.append(index_pos)
    return #n_class

def subgroupmaker(size, n, verbose=False, quit_after=None):
    subgroups = {}
    
    nexpected = comb(size-1, n-1, exact=True)
    if quit_after is None:
        quit_after = nexpected
    
    # for verbose output
    t0 = time()
    fstring = '-> class {} / {}   {:.2f} s  {:.2f} %'.format
    
    for i, c in enumerate(class_generator(size, n)):
        if i + 1 > quit_after:
            break
        if i % 100 == 0:
            if verbose:
                perc = float(i) / nexpected * 100
                elapsed = time() - t0
                print(fstring(i, nexpected, elapsed, perc))
                #print (i)

        c = tuple(c)
        
        # for the first class, just create the first subclass
        if len(subgroups) == 0:
            subgroups[c] = [c]
        else:
            # if any permutation of c is equal to a subgroup
            # (a key in dict subgroups)
            # append c to that subgroup, otherwise create a new subgroup
            for pepe in S:
                tp = tuple(pepe(c))
                if tp in subgroups: # in the keys!
                    subgroups[tp].append(c)
                    break
            else:
                subgroups[c]=[c]

# old code
# no longer necessary: classes are unique
##     for sub in subgroups:
##         sub2 = [tuple(item) for item in subgroups[sub]]
##         subgroups[sub]=list(set(sub2))
    
    print()
    return subgroups

def test():
    print('Testing class_generator(size, n) -----------')
    fstring = '\nclass_generator({}, {}) -- expected {}'.format
    
    for i1,i2 in (0, 0), (8, 0), (8, 2), (8, 3):
        nexpected = comb(i1-1, i2-1, exact=True)
        
        print(fstring(i1, i2, nexpected))
        
        for i, c in enumerate(class_generator(i1, i2)):
            print (i+1, ':', c)
    
    print('\nTesting subgroupmaker(size, n) -----------')
    
    quit_after = None #100000
    print('subgroupmaker(60, 6, quit_after={}) ----'.format(quit_after))
    
    subgroups = subgroupmaker(60, 6, quit_after=quit_after, verbose=True)
    
    n_subs = len(subgroups)
    n_classes = sum([(len(v)) for v in subgroups.values()])
    
    print ('===== {} classes, {} subgroups ====='.format(n_classes, n_subs))

##     for k, v in subgroups.items():
##         print ('{:5}: {}'.format(len(v), k))
##         for i in v:
##             print ('   ', i)

if __name__ == '__main__':
    test()

## -> class 5006300 / 5006386   2517.84 s  100.00 %

## ===== 5006386 classes, 835476 subgroups =====
